// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/feelgood-inc/flgd-gommon/models"
	mock "github.com/stretchr/testify/mock"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

type Adapter_Expecter struct {
	mock *mock.Mock
}

func (_m *Adapter) EXPECT() *Adapter_Expecter {
	return &Adapter_Expecter{mock: &_m.Mock}
}

// CreateClient provides a mock function with given fields: ctx, options
func (_m *Adapter) CreateClient(ctx context.Context, options *models.DBOptions) interface{} {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, *models.DBOptions) interface{}); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Adapter_CreateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClient'
type Adapter_CreateClient_Call struct {
	*mock.Call
}

// CreateClient is a helper method to define mock.On call
//   - ctx context.Context
//   - options *models.DBOptions
func (_e *Adapter_Expecter) CreateClient(ctx interface{}, options interface{}) *Adapter_CreateClient_Call {
	return &Adapter_CreateClient_Call{Call: _e.mock.On("CreateClient", ctx, options)}
}

func (_c *Adapter_CreateClient_Call) Run(run func(ctx context.Context, options *models.DBOptions)) *Adapter_CreateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.DBOptions))
	})
	return _c
}

func (_c *Adapter_CreateClient_Call) Return(_a0 interface{}) *Adapter_CreateClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Adapter_CreateClient_Call) RunAndReturn(run func(context.Context, *models.DBOptions) interface{}) *Adapter_CreateClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
